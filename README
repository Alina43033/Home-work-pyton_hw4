УРОК 4

Шаг 1. Напишите юнит-тесты. Не забывайте следовать стандартам оформления кода. Стиль кода Создайте отдельную ветку lesson4 и папку lesson_4. Добавляйте файлы в папку lesson_4 в соответствии с описанием в задании ниже. Документация по pytest на русском языке

Исходные данные: разработчик написал полезную утилиту для обработки строк, но не уверен, что его алгоритмы охватывают все возможные сценарии.

Задача: чтобы убедиться, что утилита справляется с задачами, вас просят написать юнит-тесты для утилиты. Красные тесты — признак того, что код ещё не готов к использованию.

Ход работы:

Скопируйте код класса string_utils.py и сохраните его в файле. Рядом создайте файл test_string_utils.py. Подключите библиотеку pytest. В файле напишите тесты для всех функций класса StringUtils

По каждой функции представлена документация и примеры использования. Напомним, что тесты бывают позитивными и негативными. Уделите внимание дизайн-тестированию. Если вы нашли какие-то дефекты в тестируемом классе, оформите их в файл defects.txt. Формат баг-репорта придумайте сами. Помните, что его будут читать как программист, так и руководитель проекта. Задание сдается в виде ссылки на репозиторий с файлами: string_utils.py test_string_utils.py pytest.ini (необязательно) defects.txt (необязательно)

Критерии оценки работы Обязательно проверьте негативные сценарии (приведите свои примеры):

Пустая строка — “” Строка с пробелом — “ “ None Пустой список — [ ] (если метод принимает список).

Обязательно проверьте положительные сценарии (приведите свои примеры): «Тест» — не пустая строка. «123» — числа в виде строки. «04 апреля 2023» — строка с пробелами.
